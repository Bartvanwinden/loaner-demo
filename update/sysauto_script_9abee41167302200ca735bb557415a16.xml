<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>Loaner Request Demo Data</name>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2016-07-22 17:15:10</run_start>
        <run_time>1970-01-01 07:00:00</run_time>
        <run_type>on_demand</run_type>
        <script><![CDATA[/*
 * Fix the dates on the demo records so they are current
 *
 */
(function () {
	var gr = new GlideRecord("x_snc_lrs_request");
	gr.query();
	
	var diffDayVar = _getDateDiff('desc');
	
	while (gr.next()) {
		gr.sys_created_on   = _changeDate(gr.sys_created_on, diffDayVar);
		gr.sys_updated_on   = _changeDate(gr.sys_updated_on, diffDayVar);
		gr.work_start       = _changeDate(gr.work_start, diffDayVar);
		gr.work_end         = _changeDate(gr.work_end, diffDayVar);
		gr.pickup_reminder  = _changeDate(gr.pickup_reminder, diffDayVar);
		gr.return_reminder  = _changeDate(gr.return_reminder, diffDayVar);
		gr.overdue_reminder = _changeDate(gr.overdue_reminder, diffDayVar);
		gr.opened_at        = _changeDate(gr.opened_at, diffDayVar);
		gr.closed_at        = _changeDate(gr.closed_at, diffDayVar);
		gr.sys_updated_on   = _changeDate(gr.sys_updated_on, diffDayVar);
		
		gr.autoSysFields(false);  // Do not update sys_updated_on, sys_updated_by, and sys_mod_count
		gr.setWorkflow(false);    // Do not run any other business rules
		gr.update();
		gs.debug('LRS Scheduled Job: Updated date/time on ' + gr.number + ' start=' + gr.work_start.getDisplayValue());
	}
})();

function _changeDate(field, diff) {
	var tempDate = new GlideDateTime(field);
	tempDate.addDaysLocalTime(diff - 1);
	
	return tempDate;
}

function _getDateDiff(sortOrder) {
	var diffDays = 0;
	var gr = new GlideRecord("x_snc_lrs_request");
	if (sortOrder == 'desc') {
		gr.orderByDesc('sys_created_on');
	} else {
		gr.orderBy('sys_created_on');
	}
	gr.setLimit(1);
	gr.query();
	if (gr.next()) {
		var nowDate = new GlideDateTime();
		var openDate = new GlideDateTime(gr.sys_created_on);
		diffDays = GlideDateTime.subtract(openDate, nowDate).getDayPart();
		gs.debug('Current date is ' + nowDate.getDisplayValue() + ' and most recent request is dated ' + openDate.getDisplayValue());
		gs.debug('Diff days is ' + diffDays);
	}
	return diffDays;
}

/*
 * Add the ITIL role to the Service Desk group
 *
 */
(function () {
	var roleID  = '282bf1fac6112285017366cb5f867469'; // ITIL
	var groupID = 'd625dccec0a8016700a222a0f7900d06'; // Service Desk
	var gr = new GlideRecord('sys_group_has_role');
	gr.addQuery('group', groupID);
	gr.addQuery('role', roleID);
	gr.query();
	
	if (!gr.next()) {
		gr.newRecord();
		gr.group = groupID;
		gr.role  = roleID;
		gr.insert();
		gs.debug('LRS Scheduled Job: Added role ' + gr.role.getDisplayValue() + ' to group ' + gr.group.getDisplayValue());
	}
})();
]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-07-22 17:16:10</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>9abee41167302200ca735bb557415a16</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Loaner Request Demo Data</sys_name>
        <sys_package display_value="Loaner Request" source="x_snc_lrs">a50dc98c13f0220068ac58a12244b079</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Loaner Request">a50dc98c13f0220068ac58a12244b079</sys_scope>
        <sys_update_name>sysauto_script_9abee41167302200ca735bb557415a16</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-07-22 21:10:16</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
